{"version":3,"sources":["components/footer/footer.component.jsx","components/search-box/search-box-component.jsx","components/card/card.component.jsx","components/card-list/card-list-component.jsx","App.js","serviceWorker.js","index.js"],"names":["Footer","className","style","animationDelay","href","target","rel","color","SearchBox","handleChange","type","placeholder","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","key","App","state","searchField","fetch","then","response","json","users","setState","this","flterMonster","filter","toLowerCase","includes","e","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kYAIaA,EAAQ,WACjB,OACI,4BAAQC,UAAU,WAAWC,MAAO,CAACC,eAAe,OAChD,yBAAKF,UAAU,QACf,uBAAGG,KAAK,2CAA2CC,OAAO,UAAUC,IAAI,uBAAxE,gBAEA,uBAAGF,KAAK,+BAA+BC,OAAO,UAAUJ,UAAU,UAAS,kBAAC,IAAD,CAAaM,MAAO,YAA/F,KACA,uBAAGH,KAAK,sCAAsCC,OAAO,UAAUJ,UAAU,UAAS,kBAAC,IAAD,CAAiBM,MAAO,eCRzGC,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,aAAF,OACrB,yBAAKR,UAAU,UACf,2BACAA,UAAU,aACVS,KAAK,SACLC,YAAY,kBACZC,SAAWH,OCPFI,G,MAAK,SAACC,GAAD,OAClB,yBAAKb,UAAU,kBACf,yBACAc,IAAI,UACJC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACH,4BAAKJ,EAAMG,QAAQE,MACnB,+BAAKL,EAAMG,QAAQG,UCJNC,G,MAAU,SAACP,GAAD,OACnB,yBAAKb,UAAU,aACTa,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OAAG,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,UC8BxDQ,E,kDA7Bb,aACG,IAAD,8BACE,gBACKC,MAAM,CACTJ,SAAS,GACTK,YAAY,IAJhB,E,gEAOgB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKC,SAAS,CAACX,SAASU,S,+BAE7B,IAAD,SACuBE,KAAKR,MAA5BJ,EADA,EACAA,SAASK,EADT,EACSA,YACTQ,EAAcb,EAASc,QAAO,SAAAnB,GAAO,OAAEA,EAAQE,KAAKkB,cAAcC,SAASX,EAAYU,kBAC7F,OACM,yBAAKpC,UAAU,OACd,wBAAIA,UAAU,SAAd,iBACA,kBAAC,EAAD,CACAQ,aAAe,SAAA8B,GAAC,OAAG,EAAKN,SAAS,CAACN,YAAYY,EAAElC,OAAOmC,WAExD,kBAAC,EAAD,CAAUlB,SAAUa,IACpB,kBAAC,EAAD,W,GAxBQM,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4a7a9592.chunk.js","sourcesContent":["import React from 'react';\r\nimport './footer.style.css';\r\nimport * as Icon from 'react-feather';\r\n\r\nexport const Footer =()=>{\r\n    return(\r\n        <footer className=\"fadeInUp\" style={{animationDelay:'2s'}}>\r\n            <div className=\"link\">\r\n            <a href='https://github.com/rohit1204/monster-app' target='__blank' rel=\"noopener noreferrer\">Monster App</a>   \r\n            </div>\r\n            <a href='https://github.com/rohit1204' target='__blank' className='github'><Icon.GitHub color={\"#000000\"}/> </a>\r\n            <a href='https://instagram.com/rohit.ahuja04' target='__blank' className='github'><Icon.Instagram  color={\"#fb5581\"}/></a>\r\n        </footer>\r\n    )\r\n}","import React from 'react';\r\nimport './search.style.css';\r\n\r\nexport const SearchBox = ({handleChange})=>(\r\n    <div className=\"search\"> \r\n    <input\r\n    className='search-box'\r\n    type=\"search\"\r\n    placeholder=\"search monsters\"\r\n    onChange={ handleChange}\r\n    />\r\n    </div>\r\n);","import React from 'react';\r\nimport './card.styles.css';\r\nexport const Card=(props)=>(\r\n<div className=\"card-container\"> \r\n<img \r\nalt='monster' \r\nsrc={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n<h1>{props.monster.name}</h1>\r\n<p> {props.monster.email}</p>\r\n</div>\r\n);","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list-styles.css';\r\n\r\nexport const CardList =(props)=> (\r\n    <div className=\"card-list\">\r\n         {props.monsters.map(monster=>(<Card key={monster.id} monster={monster}/>))}\r\n        </div>\r\n        );","import React,{Component} from 'react';\r\nimport './App.css';\r\nimport  {Footer} from './components/footer/footer.component';\r\nimport { SearchBox } from './components/search-box/search-box-component';\r\nimport { CardList } from './components/card-list/card-list-component';\r\n\r\nclass App extends Component{\r\n  constructor()\r\n    {\r\n      super();\r\n      this.state={\r\n        monsters:[],\r\n        searchField:\"\"\r\n      };\r\n    }\r\ncomponentDidMount(){\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n  .then(response=> response.json())\r\n  .then(users=> this.setState({monsters:users}));\r\n}\r\n  render(){\r\n    const{monsters,searchField}= this.state;\r\n    const flterMonster= monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()))\r\n    return(\r\n          <div className=\"App\">\r\n           <h1 className=\"title\">Monsters App </h1>\r\n           <SearchBox\r\n           handleChange= {e=> this.setState({searchField:e.target.value})}\r\n           />\r\n          <CardList monsters={flterMonster}/>\r\n          <Footer/>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}